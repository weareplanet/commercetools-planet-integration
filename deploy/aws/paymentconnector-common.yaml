AWSTemplateFormatVersion: '2010-09-09'

Description: Payment Connector - Common Infrastructure

Parameters:

  lambdaBucketName:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$"
    Description: Bucket name to hold Lambda function code.
    Default: "commercetools-paymentconnector-lambda-releases"
  apiStageName:
    Type: "String"
    Description: API Staging Name.
    Default: "v1"
  apiResourcePath:
    Type: "String"
    Description: Resource Path for API.
    Default: "hello"
  lambdaFunctionDummy:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$"
    Description: Dummy Lambda function name.
    Default: "paymentconnector-dummy"
  githubIAMUser:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$"
    Description: IAM User for GitHub Actions usage.
    Default: "paymentconnector-gh-user"

Resources:

  LambdaS3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Ref "lambdaBucketName"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
            BucketKeyEnabled: true
      AccessControl: "BucketOwnerFullControl"
      VersioningConfiguration: 
        Status: Enabled
      PublicAccessBlockConfiguration:
          BlockPublicAcls: True
          BlockPublicPolicy: True
          IgnorePublicAcls: True
          RestrictPublicBuckets: True

  LambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambdaFunctionDummy}:*"
          PolicyName: !Join ["", [{"Ref": "AWS::StackName"}, "-lambda-log"]]

  # cannot have the lambda dummy function with a S3 payload without 
  # having the bucket AND the .zip already (an "eeg and chicken" thing)
  # so it goes as a code snippet
  LambdaFunctionDummy:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          exports.handler = async function(event, context) {
            return { statusCode: 200, body: 'Hello World! This is a dummy thing.' };
          };
      Description: Lambda function for Payment Connector, without API Gateway.
      FunctionName: !Ref "lambdaFunctionDummy"
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaIamRole.Arn
      Runtime: nodejs16.x
      Timeout: 60
      Environment:
        Variables:
          CT_CLIENT_ID: "CommerceTools CLIENT ID"
          CT_CLIENT_SECRET: "CommerceTools CLIENT SECRET"
          CT_PROJECT_ID: "CommerceTools PROJECT ID"
          CT_AUTH_URL: "CommerceTools AUTHENTICATION URL"
          CT_API_URL: "CommerceTools API URL"
          # CT or DT ? Or both?
          CT_MERCHANTS: "CommerceTools MERCHANTS"
          DT_MERCHANTS: "Datatrans MERCHANTS"
          DT_CONNECTOR_WEBHOOK_URL: "Datatrans Connector Webhook"
          DT_PROD_API_URL: "Datatrans PRODUCTION API URL"
          DT_TEST_API_URL: "Datatrans TEST API URL"
          LOG_LEVEL: "debug"

  LambdaLogGroupDummy:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${lambdaFunctionDummy}"
      RetentionInDays: 30

  LambdaFunctionDummyURL:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: "AWS_IAM"
      TargetFunctionArn: !GetAtt LambdaFunctionDummy.Arn

  LambdaPermissionDummy:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunctionDummy.Arn
      Action: lambda:InvokeFunctionURL
      Principal: "*"
      FunctionUrlAuthType: "AWS_IAM"

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunctionDummy.Arn
      Action: lambda:InvokeFunction
      Principal: 'apigateway.amazonaws.com'

  ApiKey: 
    Type: AWS::ApiGateway::ApiKey
    Properties: 
      Name: !Join ["", [{"Ref": "AWS::StackName"}, "-apikey"]]
      Description: !Join ["", [{"Ref": "AWS::StackName"}, "api key"]]
      Enabled: true
      GenerateDistinctId: false
  ApiUsagePlan:
    Type: "AWS::ApiGateway::UsagePlan"
    DependsOn: ApiGatewayStage
    Properties:
      ApiStages: 
      - ApiId: !Ref ApiGatewayRestApi
        Stage: !Ref "apiStageName"    
      #Quota: 
      #Throttle: 
      Description: !Join [" ", [{"Ref": "AWS::StackName"}, "API Gateway usage plan"]]
      UsagePlanName: !Join ["", [{"Ref": "AWS::StackName"}, "-usage-plan"]]
  ApiUsagePlanKey:
    Type: "AWS::ApiGateway::UsagePlanKey"
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      Description: "An API Gateway for Payment Connector Lambdas."
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Join ["", [{"Ref": "AWS::StackName"}, "-api"]]

  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref ApiGatewayRestApi
      Schema: {}

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      Description: Lambda API Stage v1
      RestApiId: !Ref ApiGatewayRestApi
      StageName: !Ref "apiStageName"

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ProxyResourceANY
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref ApiGatewayRestApi

  ProxyResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: !Ref "apiResourcePath"

  ProxyResourceANY:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ProxyResource
      HttpMethod: GET
      ApiKeyRequired: true
      AuthorizationType: NONE
      OperationName: !Ref "apiResourcePath"
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunctionDummy.Arn}/invocations'

  GitHubIAMUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Ref "githubIAMUser"
      Policies:
      - PolicyName: !Join ["", [{"Ref": "githubIAMUser"}, "-inline-policy-lambda"]]
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:ListAliases
            - lambda:UpdateFunctionCode
            - lambda:CreateFunction
            - lambda:UpdateFunctionConfiguration
            Resource:
            - !Sub "arn:aws:lambda:*:${AWS::AccountId}:function:*"
          - Effect: Allow
            Action:
            - lambda:ListFunctions
            Resource:
            - "*"
      - PolicyName: !Join ["", [{"Ref": "githubIAMUser"}, "-inline-policy-s3"]]
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:PutObject
            Resource:
            - !Sub "arn:aws:s3:::${lambdaBucketName}/*"
      - PolicyName: !Join ["", [{"Ref": "githubIAMUser"}, "-inline-policy-iam"]]
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - iam:ListRoles
            Resource:
            - !Sub "arn:aws:iam::*"

  GitHubIAMUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref "githubIAMUser"
    DependsOn: GitHubIAMUser

Outputs:

  AccessKeyforGitHubIAMUserAccessKey:
    Value:
      !Ref GitHubIAMUserAccessKey
  SecretKeyforGitHubIAMUserAccessKey:
    Value: !GetAtt GitHubIAMUserAccessKey.SecretAccessKey