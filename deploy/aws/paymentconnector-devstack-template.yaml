
# it depends on 
# deploying the "paymentconnector-common" CF stack

AWSTemplateFormatVersion: '2010-09-09'

Description: Payment Connector - Lambdas and extras for STACKNAME-DEVELOPER.

Parameters:
  lambdaFunctionName:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$"
    Description: Lambda function name.
    Default: "STACKNAME-DEVELOPER"
  apiStageName:
    Type: "String"
    Description: API Staging Name.
    Default: "v1"
  apiResourcePath:
    Type: "String"
    Description: Resource Path for API.
    Default: "{proxy}"
  apiRestApiName:
    Type: "String"
    Description: API-Gateway REST API Name.
    Default: "STACKNAME-DEVELOPER-api"

Resources:

##### Lambda

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          exports.handler = async function(event, context) {
            return { statusCode: 200, body: 'Hello World, from STACKNAME-DEVELOPER, with API-Gateway integration.' };
          };
      Description: Lambda function of Payment Connector for DEVELOPER, without API Gateway.
      FunctionName: !Ref "lambdaFunctionName"
      Handler: "app/environment-specific-handlers/aws-lambda-via-http/index.allOperationsHandler"
      MemorySize: 128
      Role: !GetAtt LambdaIamRole.Arn
      Runtime: nodejs16.x
      Timeout: 60
      Environment:
        Variables:
          CT_CLIENT_ID: "CommerceTools CLIENT ID"
          CT_CLIENT_SECRET: "CommerceTools CLIENT SECRET"
          CT_PROJECT_ID: "CommerceTools PROJECT ID"
          CT_AUTH_URL: "CommerceTools AUTHENTICATION URL"
          CT_API_URL: "CommerceTools API URL"
          # CT or DT ? Or both?
          CT_MERCHANTS: "CommerceTools MERCHANTS"
          DT_MERCHANTS: "Datatrans MERCHANTS"
          DT_CONNECTOR_WEBHOOK_URL: "Datatrans Connector Webhook"
          DT_PROD_API_URL: "Datatrans PRODUCTION API URL"
          DT_TEST_API_URL: "Datatrans TEST API URL"
          LOG_LEVEL: "debug"

  LambdaFunctionURL:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: "AWS_IAM"
      TargetFunctionArn: !GetAtt LambdaFunction.Arn

  LambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambdaFunctionName}:*"
          PolicyName: !Join ["", [{"Ref": "AWS::StackName"}, "-lambda-log"]]

  LambdaPermissionNoAPI:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: lambda:InvokeFunctionURL
      Principal: "*"
      FunctionUrlAuthType: "AWS_IAM"

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/*"

  LambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${lambdaFunctionName}"
      RetentionInDays: 30

##### API Gateway

  ApiKey: 
    Type: AWS::ApiGateway::ApiKey
    Properties: 
      Name: !Join ["", [{"Ref": "AWS::StackName"}, "-apikey"]]
      Description: !Join ["", [{"Ref": "AWS::StackName"}, "api key"]]
      Enabled: true
      GenerateDistinctId: false

  ApiUsagePlan:
    Type: "AWS::ApiGateway::UsagePlan"
    DependsOn: ApiGatewayStage
    Properties:
      ApiStages: 
      - ApiId: !Ref ApiGatewayRestApi
        Stage: !Ref "apiStageName"    
      Description: !Join [" ", [{"Ref": "AWS::StackName"}, "API Gateway usage plan"]]
      UsagePlanName: !Join ["", [{"Ref": "AWS::StackName"}, "-usage-plan"]]

  ApiUsagePlanKey:
    Type: "AWS::ApiGateway::UsagePlanKey"
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      Description: "An API Gateway to the Payment Connector Lambda for DEVELOPER."
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Ref "apiRestApiName"

  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref ApiGatewayRestApi
      Schema: {}

  ApiGatewayAccessLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/apigateway/STACKNAME-DEVELOPER-${ApiGatewayRestApi}"
      RetentionInDays: 30

  ApiGatewayLoggingIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

  ApiGatewayAccountConfig:
    Type: "AWS::ApiGateway::Account"
    DependsOn: ApiGatewayLoggingIAMRole
    Properties:
      CloudWatchRoleArn: !GetAtt "ApiGatewayLoggingIAMRole.Arn"

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      AccessLogSetting:
        DestinationArn: !Sub ${ApiGatewayAccessLogGroup.Arn}
        Format: "{ 'requestId':'$context.requestId', 'ip': '$context.identity.sourceIp', 'caller':'$context.identity.caller', 'user':'$context.identity.user','requestTime':'$context.requestTime', 'xrayTraceId':'$context.xrayTraceId', 'wafResponseCode':'$context.wafResponseCode', 'httpMethod':'$context.httpMethod','resourcePath':'$context.resourcePath', 'status':'$context.status','protocol':'$context.protocol', 'responseLength':'$context.responseLength' }"
      DeploymentId: !Ref ApiGatewayDeployment
      Description: Lambda API Stage v1
      MethodSettings:
        - ResourcePath: "/*"
          DataTraceEnabled: true
          HttpMethod: "*"
          LoggingLevel: "ERROR"
          MetricsEnabled: true
          ThrottlingBurstLimit: 500
          ThrottlingRateLimit: 1000
      RestApiId: !Ref ApiGatewayRestApi
      StageName: !Ref "apiStageName"
      TracingEnabled: true

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ProxyResourceANY
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref ApiGatewayRestApi

  ProxyResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: !Ref "apiResourcePath"

  ProxyResourceANY:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ProxyResource
      HttpMethod: POST
      ApiKeyRequired: true
      AuthorizationType: NONE
      OperationName: !Ref "apiResourcePath"
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'
        TimeoutInMillis: 29000

##### Secrets Manager

  SecretCTClientSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: 'Holds CT_CLIENT_SECRET'
      GenerateSecretString:
        PasswordLength: 16
        ExcludeCharacters: '"@/\'
      Tags:
        -
          #Key: !Join ["-", [{"Ref": "lambdaFunctionName"}, "CT_CLIENT_SECRET"]]
          Key: !Ref "lambdaFunctionName"
          Value: "CT_CLIENT_SECRET"
  SecretCTMerchants:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: 'Holds CT_MERCHANTS (an array of objects, in JSON).'
      SecretString: "[ {id: 'Test_merchant_id',password: 'Test_merchant_password',environment: 'test',dtHmacKey: 'Test_merchant_dtHmacKey' }]"
      Tags:
        -
          #Key: !Join ["-", [{"Ref": "lambdaFunctionName"}, "CT_CLIENT_SECRET"]]
          Key: !Ref "lambdaFunctionName"
          Value: "CT_MERCHANTS"

Outputs:

  ApiGatewayStageURL:
    Description: "URL for the API Gateway stage for DEVELOPER."
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${apiStageName}/"
  
  LambdaFunction:
    Description: "DEVELOPER Lambda function name"
    Value: !Ref "lambdaFunctionName"
