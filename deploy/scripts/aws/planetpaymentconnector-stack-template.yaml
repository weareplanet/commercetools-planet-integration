
# API-Gateway parts are commented as the team discuss its usage
# Change the Lambda env vars if needed.

AWSTemplateFormatVersion: '2010-09-09'

Description: Planet Payment Connector - Lambda and extras for stack 'STACKNAME-STACKID'.

Parameters:
  lambdaFunctionName:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$"
    Description: Lambda function name.
    Default: "STACKNAME-STACKID"
#   apiStageName:
#     Type: "String"
#     Description: API Staging Name.
#     Default: "v1"
#   apiResourcePath:
#     Type: "String"
#     Description: Resource Path for API.
#     Default: "{proxy}"
#   apiRestApiName:
#     Type: "String"
#     Description: API-Gateway REST API Name.
#     Default: "STACKNAME-STACKID-api"

Resources:

##### Lambda

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          exports.handler = async function(event, context) {
            return { statusCode: 200, body: 'Hello World, from STACKNAME-STACKID.' };
          };
      Description: Lambda function of Planet Payment Connector for STACKID.
      FunctionName: !Ref "lambdaFunctionName"
      Handler: "app/environment-specific-handlers/aws-lambda-via-arn/index.allOperationsHandler"
      MemorySize: 128
      Role: !GetAtt LambdaIamRole.Arn
      Runtime: nodejs16.x
      Timeout: 150
      Environment:
        Variables:
          CT_API_URL: "https://api.us-central1.gcp.commercetools.com/" # CommerceTools API URL, double-check this
          CT_AUTH_URL: "https://auth.us-central1.gcp.commercetools.com/" # CommerceTools AUTH URL, double-check this
          CT_CLIENT_ID: "CommerceTools CLIENT ID, as a String" # from the CommerceTools project credentials
          CT_CLIENT_SECRET: "CommerceTools CLIENT SECRET, as a String" # from the CommerceTools project credentials
          CT_PROJECT_ID: "CommerceTools PROJECT ID, as a String" # from the CommerceTools project
          DT_CONNECTOR_WEBHOOK_URL: "Connector Webhook for Datatrans - it's your Lambda Function URL" # must set variable manually after deployment
          DT_MERCHANTS: "Datatrans MERCHANTS, as a stringified JSON containing id, password, environment and HMAC key"
          DT_PROD_API_URL: "https://api.PROD.datatrans.com/v1" # Datatrans PRODUCTION API URL, double-check this
          DT_TEST_API_URL: "https://api.sandbox.datatrans.com/v1" # Datatrans TEST/SANDBOX API URL, double-check this
          LOG_LEVEL: "debug" # change to INFO after debugging whatever is needed

  LambdaFunctionURL:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: "AWS_IAM"
      TargetFunctionArn: !GetAtt LambdaFunction.Arn

  LambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambdaFunctionName}:*"
          PolicyName: !Join ["", [{"Ref": "AWS::StackName"}, "-lambda-log"]]

  LambdaPermissionNoAPI:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: lambda:InvokeFunctionURL
      Principal: "*"
      FunctionUrlAuthType: "AWS_IAM"

# LambdaPermission:
#   Type: AWS::Lambda::Permission
#   Properties:
#     FunctionName: !GetAtt LambdaFunction.Arn
#     Action: lambda:InvokeFunction
#     Principal: 'apigateway.amazonaws.com'
#     SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/*"

  LambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${lambdaFunctionName}"
      RetentionInDays: 90

##### API Gateway

# ApiKey: 
#   Type: AWS::ApiGateway::ApiKey
#   Properties: 
#     Name: !Join ["", [{"Ref": "AWS::StackName"}, "-apikey"]]
#     Description: !Join ["", [{"Ref": "AWS::StackName"}, "api key"]]
#     Enabled: true
#     GenerateDistinctId: false
#
# ApiUsagePlan:
#   Type: "AWS::ApiGateway::UsagePlan"
#   DependsOn: ApiGatewayStage
#   Properties:
#     ApiStages: 
#     - ApiId: !Ref ApiGatewayRestApi
#       Stage: !Ref "apiStageName"    
#     Description: !Join [" ", [{"Ref": "AWS::StackName"}, "API Gateway usage plan"]]
#     UsagePlanName: !Join ["", [{"Ref": "AWS::StackName"}, "-usage-plan"]]
#
# ApiUsagePlanKey:
#   Type: "AWS::ApiGateway::UsagePlanKey"
#   Properties:
#     KeyId: !Ref ApiKey
#     KeyType: API_KEY
#     UsagePlanId: !Ref ApiUsagePlan
#
# ApiGatewayRestApi:
#   Type: AWS::ApiGateway::RestApi
#   Properties:
#     ApiKeySourceType: HEADER
#     Description: "An API Gateway to the Payment Connector Lambda for STACKID."
#     EndpointConfiguration:
#       Types:
#         - REGIONAL
#     Name: !Ref "apiRestApiName"
#
# ApiGatewayModel:
#   Type: AWS::ApiGateway::Model
#   Properties:
#     ContentType: 'application/json'
#     RestApiId: !Ref ApiGatewayRestApi
#     Schema: {}
#
# ApiGatewayAccessLogGroup:
#   Type: "AWS::Logs::LogGroup"
#   Properties:
#     LogGroupName: !Sub "/aws/apigateway/STACKNAME-STACKID-${ApiGatewayRestApi}"
#     RetentionInDays: 30
#
# ApiGatewayLoggingIAMRole:
#   Type: AWS::IAM::Role
#   Properties:
#     AssumeRolePolicyDocument:
#       Version: '2012-10-17'
#       Statement:
#         - Effect: 'Allow'
#           Principal:
#             Service:
#               - 'apigateway.amazonaws.com'
#           Action:
#             - 'sts:AssumeRole'
#     Path: '/'
#     ManagedPolicyArns:
#       - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
#
# ApiGatewayAccountConfig:
#   Type: "AWS::ApiGateway::Account"
#   DependsOn: ApiGatewayLoggingIAMRole
#   Properties:
#     CloudWatchRoleArn: !GetAtt "ApiGatewayLoggingIAMRole.Arn"
#
# ApiGatewayStage:
#   Type: AWS::ApiGateway::Stage
#   Properties:
#     AccessLogSetting:
#       DestinationArn: !Sub ${ApiGatewayAccessLogGroup.Arn}
#       Format: "{ 'requestId':'$context.requestId', 'ip': '$context.identity.sourceIp', 'caller':'$context.identity.caller', 'user':'$context.identity.user','requestTime':'$context.requestTime', 'xrayTraceId':'$context.xrayTraceId', 'wafResponseCode':'$context.wafResponseCode', 'httpMethod':'$context.httpMethod','resourcePath':'$context.resourcePath', 'status':'$context.status','protocol':'$context.protocol', 'responseLength':'$context.responseLength' }"
#     DeploymentId: !Ref ApiGatewayDeployment
#     Description: Lambda API Stage v1
#     MethodSettings:
#       - ResourcePath: "/*"
#         DataTraceEnabled: true
#         HttpMethod: "*"
#         LoggingLevel: "ERROR"
#         MetricsEnabled: true
#         ThrottlingBurstLimit: 500
#         ThrottlingRateLimit: 1000
#     RestApiId: !Ref ApiGatewayRestApi
#     StageName: !Ref "apiStageName"
#     TracingEnabled: true
#
# ApiGatewayDeployment:
#   Type: AWS::ApiGateway::Deployment
#   DependsOn: ProxyResourceANY
#   Properties:
#     Description: Lambda API Deployment
#     RestApiId: !Ref ApiGatewayRestApi
#
# ProxyResource:
#   Type: 'AWS::ApiGateway::Resource'
#   Properties:
#     RestApiId: !Ref ApiGatewayRestApi
#     ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
#     PathPart: !Ref "apiResourcePath"
#
# ProxyResourceANY:
#   Type: 'AWS::ApiGateway::Method'
#   Properties:
#     RestApiId: !Ref ApiGatewayRestApi
#     ResourceId: !Ref ProxyResource
#     HttpMethod: POST
#     ApiKeyRequired: true
#     AuthorizationType: NONE
#     OperationName: !Ref "apiResourcePath"
#     Integration:
#       Type: AWS_PROXY
#       IntegrationHttpMethod: POST
#       Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'
#       TimeoutInMillis: 29000

Outputs:

#  ApiGatewayStageURL:
#    Description: "URL for the API Gateway stage for STACKID."
#    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${apiStageName}/"
  
  LambdaFunctionName:
    Description: "STACKID Lambda function name"
    Value: !Ref "lambdaFunctionName"

  LambdaFunctionURL:
    Description: "STACKID Lambda function URL"
    Value: !GetAtt LambdaFunctionURL.FunctionUrl
